service: serverless

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3

  stage: dev
  region: eu-west-1

  vpc:
    subnetIds:
      - subnet-ea77559c
      - subnet-273b517f
      - subnet-71406915
    securityGroupIds:
      - sg-a33e41c5

  # Temporary until iamRoleStatements are loaded before functions
  role: arn:aws:iam::255374676661:role/lambda-serverless

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DetachNetworkInterface"
        - "ec2:DeleteNetworkInterface"
        - 'logs:CreateLogGroup'
        - 'logs:CreateLogStream'
        - 'logs:PutLogEvents'
      Resource: "*"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  # Users
  getUser:
    handler: api/users.get
    events:
      - http: GET users/{id}
  updateUser:
    handler: api/users.update
    events:
      - http: PUT users/{id}
  deleteUser:
    handler: api/users.delete
    events:
      - http: DELETE users/{id}
  createUser:
    handler: api/users.create
    events:
      - http: POST users
  listUsers:
    handler: api/users.list
    events:
      - http: GET users

  # Posts
  # postGet:
    # handler: api/posts.get
    # events:
      # - http:
          # path: posts/{id}
          # method: get
  # ...



#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

# resources:
  # Resources:
    # Redis:
      # Type: AWS::ElastiCache::CacheCluster
      # Properties:
        # CacheNodeType: cache.t2.micro
        # CacheSubnetGroupName: default
        # ClusterName: serverless
        # Engine: redis
        # NumCacheNodes: 1
        # VpcSecurityGroupIds:
          # - sg-212f5247

plugins:
  - serverless-offline
